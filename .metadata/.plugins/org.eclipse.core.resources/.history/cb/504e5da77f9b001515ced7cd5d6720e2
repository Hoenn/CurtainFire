package com.neet.cf.screens;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.viewport.ScreenViewport;
import com.curtainfire.CurtainFireGame;
import com.curtainfire.debug.DebugController;
import com.curtainfire.entities.CircleBullet;
import com.curtainfire.entities.Player;
import com.curtainfire.entities.RectBullet;
import com.curtainfire.facilities.PlayerInput;
import com.curtainfire.script.ScriptController;
import com.curtainfire.ui.BattlePanel;

public class BattleScreen extends GameScreen
{	
	public static Stage stage;
	public static final int MENU_WIDTH = 170;
	public static float FIELD_WIDTH;
	public static float FIELD_HEIGHT;
	public static boolean INVOKE_GC; //only runs garbage collection when one or more bullet states that it is not alive
	
	private final float DELTA_LIMIT = 0.030f;
	private String scriptFile = "shooter.cfl"; //temporary
	public static ScriptController scriptController; //plan on using array, every instance of scriptController should control an indiviual instance of Enemy
	
	private DebugController debugController;
	
	public static Array<CircleBullet> enemyBullets;
	public static Array<RectBullet> playerBullets;
	
	public static BattlePanel battlePanel;
	
	public BattleScreen()
	{	
		stage = new Stage(new ScreenViewport());
		
		FIELD_WIDTH = stage.getWidth() - MENU_WIDTH;
		FIELD_HEIGHT = stage.getHeight();
		
		INVOKE_GC = false;
		
		scriptController = new ScriptController(scriptFile);
		
		//Menu Widget
		
		battlePanel = new BattlePanel(stage);
		
		//Menu Widget
		
		Gdx.input.setInputProcessor(stage);
		
		enemyBullets = new Array<CircleBullet>();
		playerBullets = new Array<RectBullet>();
		
		if (CurtainFireGame.DEBUG)
		{
			battlePanel.setDebug(true);
			debugController = new DebugController(scriptController);
		}
		
		//temporary
		Player player = new Player("Beedrill", "Beedrill_1.png", "Beedrill_2.png", 0.6f, 250, 50, 3);
		
		stage.addActor(player);
		
		Gdx.input.setInputProcessor(new PlayerInput(player));
		
		
	}

	@Override
	public void show()
	{
		// TODO Auto-generated method stub
		
	}
	
	/*
	 * Game Logic goes here
	 */
	public void tick(float delta)
	{
		scriptController.tick();
		if (CurtainFireGame.DEBUG)
			debugController.tick();
		if (enemyBullets.size > 0)
		{
			
			for (CircleBullet e : enemyBullets)
			{
				if (!scriptController.isPause())
					e.tick(delta);
				e.draw();
			}
			
			for (RectBullet e : playerBullets)
			{ 
				e.tick(delta);
				e.draw();
			}
			
		}
		if (INVOKE_GC)
		{
			garbageCollection();
		}
	}
	
	private void garbageCollection()
	{
		INVOKE_GC = false;
		for (int i = 0, len = enemyBullets.size; i < len; i++)
		{
			if (!enemyBullets.get(i).isAlive())
			{
				enemyBullets.removeIndex(i);
				i--;
				len--;
			}
		}
		for (int i = 0, len = playerBullets.size; i < len; i++)
		{
			if (!playerBullets.get(i).isAlive())
			{
				playerBullets.removeIndex(i);
				i--;
				len--;
			}
		}
	}

	@Override
	public void render(float delta)
	{
		if (delta < DELTA_LIMIT)
		{	
			Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
			
			stage.act(delta);
			CurtainFireGame.shapeRenderer.begin(ShapeType.Line);
			stage.draw();
			tick(delta);
			CurtainFireGame.shapeRenderer.end();
			CurtainFireGame.batch.begin();
			if (CurtainFireGame.DEBUG)
				debugController.render();
			battlePanel.getMenuTable().iDraw(CurtainFireGame.batch);
			CurtainFireGame.batch.end();
		}
	}

	@Override
	public void resize(int width, int height)
	{
		stage.getViewport().update(width, height, true);
	}

	@Override
	public void pause()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void resume()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void hide()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void dispose()
	{
		stage.dispose();		
	}

	public String getScriptFile()
	{
		return scriptFile;
	}

	public void setScriptFile(String scriptFile)
	{
		this.scriptFile = scriptFile;
	}

	@Override
	public void handleInput()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void update(float dt)
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	public void render()
	{
		// TODO Auto-generated method stub
		
	}

}
